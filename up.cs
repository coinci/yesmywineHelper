[HttpPost]        [ValidateAntiForgeryToken]        public ActionResult UploadFile(HttpPostedFileBase Filedata, FormCollection formData, int? folderID)        {            //string st=$("#hddFHId").val();            // return Content(folderID);            folderID=Convert.ToInt32(HttpContext.Request.Cookies["FHID"].Value);            if (Filedata == null || Filedata.ContentLength <= 0)            {                return Json(new FileUploadState                {                    Result = FileUploadState.State.failed,                    Message = "No file received"                });            }            string emailaddress = formData["emailaddress"];            if (base.LoginUser.RoleId.Value == SysVars.ImageAgencyRoleID || base.LoginUser.RoleId.Value == SysVars.ContentAgencyRoleID)            {                string emailId = formData["email"];                //if ((string.IsNullOrEmpty(emailId) && string.IsNullOrEmpty(emailaddress) || !string.IsNullOrEmpty(arremail[0]))) || (!string.IsNullOrEmpty(emailId) && (string.IsNullOrEmpty(emailaddress) || string.IsNullOrEmpty(arremail[0]))))                if (string.IsNullOrEmpty(emailId) && string.IsNullOrEmpty(emailaddress))                {                    return Json(new FileUploadState                    {                        Result = FileUploadState.State.failed,                        Message = CultureHelper.GetString("Tip_AddressRequired")                    });                }            }            string fileName = System.IO.Path.GetFileName(Filedata.FileName);            string fileNameWithoutExt = System.IO.Path.GetFileNameWithoutExtension(Filedata.FileName);            string extension = System.IO.Path.GetExtension(Filedata.FileName);            using (var db = new VHPModel())            {                var user = new UsersBLL(db).GetUserById(base.LoginUser.Id);                if (user != null)                    if (Common.SysVars.DealersRoleID == user.RoleId)                    {                        fileName = string.Format("{0}_{1}_{4}_{2}{3}",                            fileNameWithoutExt,                            user.DealerCode,                            DateTime.Now.ToString("yyyy_MM_dd_HH_mm"),                            extension,                            user.Name);                    }            }            try            {                int fileID = FileEBLL.Instance.UploadNewFile(Filedata.InputStream, fileName, Filedata.ContentType, folderID, base.LoginUser.Id, base.LoginUser.RoleId.Value);                GeneratePreviewImage(fileID, fileName);                FileAccessDateBLL fadBLL = new FileAccessDateBLL();                fadBLL.Add(new []{fileID});                #region "Email Notification"  old code                //if (base.LoginUser.RoleId.Value == SysVars.ImageAgencyRoleID || base.LoginUser.RoleId.Value == SysVars.ContentAgencyRoleID)                //{                //    string emailFrom = ConfigurationManager.AppSettings["EmailUserName"];                //    string emailSubject = "Upload file notificaton";                //    FileHierarchy fileInfo = FileHierarchyBLL.Instance.GetFileHierarchy(fileID);                //    string emailBody = string.Format("{0} upload the file {1} to {2} at {3}", base.LoginUser.Name, fileInfo.Name, fileInfo.FullPath, fileInfo.CreateTime);                //    int roleId = int.Parse(formData["roleId"]);                //    if (roleId != 0)                //    {                //        if (roleId > 0)                //        {                //            foreach (var item in usersBLL.GetListByRoleId(roleId))                //            {                //                if (!string.IsNullOrEmpty(item.Email))                //                {                //                    emailSequenceBLL.Add(new EmailSequence()                //                    {                //                        EmailFrom = emailFrom,                //                        EmailTo = item.Email,                //                        EmailSubject = emailSubject,                //                        EmailBody = emailBody,                //                        CreateTime = DateTime.Now,                //                        IsRegularlySend = false,                //                        IsSend = false                //                    });                //                }                //            }                //        }                //        else                //        {                //            string company = string.Empty;                //            switch (roleId)                //            {                //                case -1:                //                    company = Common.CompanyType.CANDE;                //                    break;                //                case -2:                //                    company = Common.CompanyType.NGCC;                //                    break;                //                case -3:                //                    company = Common.CompanyType.SANDNiche;                //                    break;                //                case -4:                //                    company = Common.CompanyType.SUV;                //                    break;                //                default:                //                    break;                //            }                //            foreach (var item in usersBLL.GetListByCompany(company))                //            {                //                if (!string.IsNullOrEmpty(item.Email))                //                {                //                    emailSequenceBLL.Add(new EmailSequence()                //                    {                //                        EmailFrom = emailFrom,                //                        EmailTo = item.Email,                //                        EmailSubject = emailSubject,                //                        EmailBody = emailBody,                //                        CreateTime = DateTime.Now,                //                        IsRegularlySend = false,                //                        IsSend = false                //                    });                //                }                //            }                //        }                //    }                //    else if (!string.IsNullOrEmpty(formData["email"]))                //    {                //        emailSequenceBLL.Add(new EmailSequence()                //        {                //            EmailFrom = emailFrom,                //            EmailTo = formData["email"] + "@daimler.com",                //            EmailSubject = emailSubject,                //            EmailBody = emailBody,                //            CreateTime = DateTime.Now,                //            IsRegularlySend = false,                //            IsSend = false                //        });                //    }                //    else                //    {                //        foreach (var item in usersBLL.GetListByRoleId(SysVars.PITeamRoleID))                //        {                //            if (!string.IsNullOrEmpty(item.Email))                //            {                //                emailSequenceBLL.Add(new EmailSequence()                //                {                //                    EmailFrom = emailFrom,                //                    EmailTo = item.Email,                //                    EmailSubject = emailSubject,                //                    EmailBody = emailBody,                //                    CreateTime = DateTime.Now,                //                    IsRegularlySend = false,                //                    IsSend = false                //                });                //            }                //        }                //        foreach (var item in usersBLL.GetListByRoleId(SysVars.PMTeamRoleID))                //        {                //            if (!string.IsNullOrEmpty(item.Email))                //            {                //                emailSequenceBLL.Add(new EmailSequence()                //                {                //                    EmailFrom = emailFrom,                //                    EmailTo = item.Email,                //                    EmailSubject = emailSubject,                //                    EmailBody = emailBody,                //                    CreateTime = DateTime.Now,                //                    IsRegularlySend = false,                //                    IsSend = false                //                });                //            }                //        }                //    }                //}                #endregion "Email Notification"  old code                #region "Email Notification"  new code add by ylp 2016-8-8                if (base.LoginUser.RoleId.Value == SysVars.ImageAgencyRoleID || base.LoginUser.RoleId.Value == SysVars.ContentAgencyRoleID)                {                    if (StaticData.AllowSendEmail)                    {                        //from which mail   if mail is empty  emailfrom is name                        string emailFrom = ConfigurationManager.AppSettings["EmailUserName"];                        //subject                        string emailSubject = "Upload file notificaton";                        //file info                        FileHierarchy fileInfo = FileHierarchyBLL.Instance.GetFileHierarchy(fileID);                        //email body                        string emailBody = string.Format("{0} upload the file {1} to {2} at {3}", base.LoginUser.Name, fileInfo.Name, fileInfo.FullPath, fileInfo.CreateTime);                        string emailId = formData["email"];                        if (!string.IsNullOrEmpty(emailId) && emailId != "undefined")                        {                            if (emailId.EndsWith(","))                            {                                char[] endTrim = { ',' };                                emailId = emailId.TrimEnd(endTrim);                            }                            //add send info in table                            IList<Users> lstuser = usersBLL.GetUsersById(emailId);                            foreach (Users user in lstuser)                            {                                if (!string.IsNullOrEmpty(user.Email))                                {                                    emailSequenceBLL.Add(new EmailSequence()                                    {                                        EmailFrom = emailFrom,                                        EmailTo = user.Email,                                        EmailSubject = emailSubject,                                        EmailBody = emailBody,                                        CreateTime = DateTime.Now,                                        IsRegularlySend = false,                                        IsSend = false                                    });                                }                            }                        }                        if (!string.IsNullOrEmpty(emailaddress))                        {                            emailSequenceBLL.Add(new EmailSequence()                            {                                EmailFrom = emailFrom,                                EmailTo = emailaddress + "@daimler.com",                                EmailSubject = emailSubject,                                EmailBody = emailBody,                                CreateTime = DateTime.Now,                                IsRegularlySend = false,                                IsSend = false                            });                        }                        #region Send Email                        EmailNotification emailHepler = new EmailNotification();                        //get send info, and send mail,than update info                        foreach (var item in emailSequenceBLL.GetList())                        {                            //mail  address is not empty                            if (item.EmailTo != null && !string.IsNullOrEmpty(item.EmailTo))                            {                                emailHepler.SendEmail(new string[] { item.EmailTo }, item.EmailFrom, item.EmailSubject, item.EmailBody);                                item.IsSend = true;                                item.SendTime = DateTime.Now;                                emailSequenceBLL.Update(item);                            }                        }                    }                        #endregion Send Email                }                #endregion "Email Notification"  new code add by ylp 2016-8-8                #region "In-Shield Notification"                //Notification for SC Team & Retail Steering Agency                if (FileHierarchyBLL.Instance.IsFolderChild1(SysVars.FeedBackFolderID, fileID))                {                    //SC Team                    notificationRecordBLL.Add(new NotificationRecord()                    {                        FHId = fileID,                        RoleId = SysVars.SCTeamRoleID,                        CreateTime = DateTime.Now                    });                    //Retail Steering Agency                    notificationRecordBLL.Add(new NotificationRecord()                    {                        FHId = fileID,                        RoleId = SysVars.RetailSteeringAgencyRoleID,                        CreateTime = DateTime.Now                    });                }                //Notification for Dealers                if (FileHierarchyBLL.Instance.IsFolderChild1(SysVars.MarketingMaterialsFolderID, fileID))                {                    notificationRecordBLL.Add(new NotificationRecord()                    {                        FHId = fileID,                        RoleId = SysVars.DealersRoleID,                        CreateTime = DateTime.Now                    });                }                #endregion "In-Shield Notification"                LogHelper.WriteLog(Common.LogType.BatchUpload, string.Format(StaticData.UploadFileLogMessage, FileHierarchyBLL.GetLogicPath(fileID)));                //LogHelper.WriteLog(Common.LogType.BatchUpload, string.Format(StaticData.UploadFileLogMessage, fileName));                return Json(new FileUploadState                    {                        Result = FileUploadState.State.success,                        //Message = fileName + ":" + CultureHelper.GetString("Tip_UploadSuccess"),                        Message = CultureHelper.GetString("Tip_UploadSuccess"),                        FileID = fileID,                        AgencyComment = formData[1]                    });            }            catch (Exception ex)            {                return Json(new FileUploadState                            {                                Result = FileUploadState.State.failed,                                //Message = fileName + ":" + CommonClass.ErrorMessages.GetErrorMessage(ex)                                Message = CommonClass.ErrorMessages.GetErrorMessage(ex)                            });            }        }
